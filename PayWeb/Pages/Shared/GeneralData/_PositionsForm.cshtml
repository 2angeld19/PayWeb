@model PayWeb.Controllers.GeneralDataController.PositionViewModel
@using PayWeb.Models
@using System.Collections.Generic

<div class="row">
    <!-- Columna izquierda: Tabla de datos -->
    <div class="col-md-6">
        @{
            var tableModel = new DataTableViewModel
            {
                TableId = "positionsTable",
                EntityName = "Cargos",
                FormId = "positionsForm",
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn { Field = "id", Title = "ID", Width = "50px" },
                    new DataTableColumn { Field = "code", Title = "Código", Width = "100px" },
                    new DataTableColumn { Field = "name", Title = "Nombre del Cargo" },
                    new DataTableColumn { Field = "department", Title = "Departamento" }
                },
                Data = Model?.Positions?.Select(p => new
                {
                    id = p.Id,
                    code = p.PositionCode ?? "",
                    name = p.PositionName,
                    department = p.Department?.DepartmentName ?? ""
                }).ToList<object>() ?? new List<object>()
            };
        }

        @await Html.PartialAsync("_DataTable", tableModel)
    </div>

    <!-- Columna derecha: Formulario de detalles -->
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <form id="positionsForm" method="post" class="needs-validation" novalidate>
                    <input type="hidden" id="positionId" name="Id" value="@(Model?.CurrentPosition?.Id ?? 0)" />
                    <input type="hidden" id="companyId" name="CompanyId" value="@Model?.CompanyId" />
                    
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label for="code" class="form-label">Código</label>
                            <input type="text" class="form-control" id="code" name="PositionCode" 
                                   value="@(Model?.CurrentPosition?.PositionCode ?? "")" maxlength="20">
                        </div>
                        <div class="col-md-9 mb-3">
                            <label for="name" class="form-label">Nombre</label>
                            <input type="text" class="form-control" id="name" name="PositionName" required
                                   value="@(Model?.CurrentPosition?.PositionName ?? "")" maxlength="100">
                            <div class="invalid-feedback">Por favor ingrese un nombre para el cargo.</div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="departmentId" class="form-label">Departamento</label>
                            <select class="form-select" id="departmentId" name="DepartmentId">
                                <option value="">-- Seleccione --</option>
                                @if (Model?.Departments != null)
                                {
                                    foreach (var department in Model.Departments)
                                    {
                                        if (Model.CurrentPosition?.DepartmentId == department.Id)
                                        {
                                            <option value="@department.Id" selected>@department.DepartmentName</option>
                                        }
                                        else
                                        {
                                            <option value="@department.Id">@department.DepartmentName</option>
                                        }
                                    }
                                }
                            </select>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label d-block">Estatus</label>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="isActive" name="IsActive" 
                                       checked="@(Model?.CurrentPosition == null || (Model.CurrentPosition != null && true))">
                                <label class="form-check-label" for="isActive">Activo</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Funciones de manejo para la tabla
    window.onRowSelected_positionsTable = function(data) {
        // Cargar los datos de la fila seleccionada en el formulario
        $('#positionId').val(data.id);
        $('#code').val(data.code);
        $('#name').val(data.name);
        
        // Solicitar los detalles completos de este cargo
        fetch(`/Api/Positions/GetDetails?id=${data.id}`)
            .then(response => response.json())
            .then(details => {
                // Completar el resto de campos del formulario
                $('#departmentId').val(details.departmentId || "");
                $('#isActive').prop('checked', true); // Asumiendo que todos los cargos cargados están activos
            })
            .catch(error => {
                console.error('Error al obtener detalles:', error);
                showToast('Error', 'No se pudieron cargar los detalles del cargo', 'error');
            });
    };
    
    window.onNewItem_positionsTable = function() {
        // Limpiar el formulario para un nuevo registro
        $('#positionsForm')[0].reset();
        $('#positionId').val(0);
        // Mantener el ID de la compañía
        const companyId = $('#companyId').val();
        $('#companyId').val(companyId);
        $('#code').focus();
    };
    
    window.onSaveItem_positionsTable = function() {
        // Validar el formulario antes de enviar
        const form = $('#positionsForm')[0];
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        
        // Recopilar datos del formulario
        const formData = new FormData(form);
        
        // Enviar datos al servidor
        fetch('/Api/Positions/Save', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                // Recargar la tabla
                var table = window.dataTable_positionsTable;
                if (table) {
                    table.ajax.reload();
                } else {
                    // Si la tabla no tiene ajax configurado, recargar la página
                    location.reload();
                }
                
                // Mostrar mensaje de éxito
                showToast('Éxito', 'Cargo guardado correctamente', 'success');
                
                // Limpiar formulario
                window.onNewItem_positionsTable();
            } else {
                showToast('Error', result.message || 'Error al guardar los datos', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Error', 'Ocurrió un error al procesar la solicitud', 'error');
        });
    };
    
    window.onCancelEdit_positionsTable = function() {
        // Restablecer el formulario sin validaciones
        $('#positionsForm')[0].reset();
        $('#positionsForm').removeClass('was-validated');
    };
    
    // Función para mostrar toasts/notificaciones
    function showToast(title, message, type) {
        // Verificar si existe Toastify o un sistema similar
        if (typeof Toastify === 'function') {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: type === 'success' ? "#28a745" : "#dc3545"
            }).showToast();
        } else {
            // Fallback a alert básico
            alert(`${title}: ${message}`);
        }
    }
    
    // Inicializar al cargar la página
    $(document).ready(function() {
        // Por defecto, activar el modo "nuevo"
        window.onNewItem_positionsTable();
    });
</script>