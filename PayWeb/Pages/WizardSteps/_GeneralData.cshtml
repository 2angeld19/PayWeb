@model WizardModel
@{
    var modalForms = new Dictionary<string, string>
    {
        { "Branches", "Sucursales" },
        { "Departments", "Departamentos" },
        { "Positions", "Cargos" },
        { "Schedules", "Horarios" },
        { "CostCenters", "Centros de Costo" }
    };
    var constructionForms = new Dictionary<string, string>
    {
        { "Projects", "Proyectos" },
        { "Phases", "Fases" },
        { "Division", "División" }
    };
}

<div class="container-fluid">
    <div class="mb-4">
        <h4>Datos Generales</h4>
        <p class="text-muted">Configure los elementos básicos de su compañía</p>
    </div>

    <div class="row g-4">
        @foreach (var form in modalForms)
        {
            <div class="col-md-4 mb-3">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column">
                        <div class="text-center mb-3">
                            <i class="fas fa-folder-open fa-3x text-primary mb-3"></i>
                            <h5 class="card-title">@form.Value</h5>
                        </div>
                        <p class="card-text text-muted flex-grow-1 text-center">
                            Configure información relacionada con @form.Value.ToLower()
                        </p>
                        <button type="button" class="btn btn-outline-primary w-100 mt-auto"
                                onclick="showModal('@form.Key', '@form.Value')">
                            <i class="fas fa-cog me-2"></i>Configurar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Sección de tarjetas de construcción -->
    <div class="mt-4 mb-3 pt-3 border-top">
        <div class="d-flex align-items-center">
            <h5 class="mb-0 me-3">¿Son de Construcción?</h5>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="toggleSwitch" style="width: 3rem; height: 1.5rem;">
            </div>
        </div>
    </div>

    <div class="row g-4">
        @foreach (var form in constructionForms)
        {
            <div class="col-md-4 mb-3">
                <div class="card h-100 shadow-sm border-warning">
                    <div class="card-body d-flex flex-column">
                        <div class="text-center mb-3">
                            <i class="fas fa-hard-hat fa-3x text-warning mb-3"></i>
                            <h5 class="card-title text-warning">@form.Value</h5>
                        </div>
                        <p class="card-text text-muted flex-grow-1 text-center">
                            Configure información relacionada con @form.Value.ToLower() de construcción
                        </p>
                        <!-- Quitamos el atributo disabled y agregamos una clase -->
                        <button type="button" class="btn btn-outline-warning w-100 mt-auto construction-button"
                                onclick="showModal('@form.Key', '@form.Value')">
                            <i class="fas fa-cog me-2"></i>Configurar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal único que se utilizará para todos los formularios -->
<div class="modal fade" id="dynamicModal" tabindex="-1" aria-labelledby="dynamicModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dynamicModalLabel">Modal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalContent">
                <!-- Aquí se cargará el contenido dinámicamente -->
            </div>
        </div>
    </div>
</div>

<script>
    // Obtener elementos del DOM
    const toggleSwitch = document.getElementById("toggleSwitch");
    const constructionButtons = document.querySelectorAll(".construction-button");

    // Función para alternar la apariencia de los botones de construcción (no el disabled)
    function toggleConstructionButtons(enable) {
        constructionButtons.forEach(button => {
            if (enable) {
                button.classList.add('btn-warning');
                button.classList.remove('btn-outline-warning');
            } else {
                button.classList.remove('btn-warning');
                button.classList.add('btn-outline-warning');
            }
            // Ya no usamos disabled
            // button.disabled = !enable;
        });
    }

    // Evento para el interruptor
    toggleSwitch.addEventListener("change", function () {
        toggleConstructionButtons(this.checked);
    });
</script>